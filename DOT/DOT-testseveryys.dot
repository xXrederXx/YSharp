digraph AST {
rankdir=LR;
  node0 [label="LIST" shape="Msquare"];
  node1 [label="Assign intVar" shape="ellipse"];
  node2 [label="10" shape="rect"];
  node1 -> node2 [label="value"];
  node0 -> node1 [label="elem[0]"];
  node3 [label="Assign doubleVar" shape="ellipse"];
  node4 [label="3.141529618" shape="rect"];
  node3 -> node4 [label="value"];
  node0 -> node3 [label="elem[1]"];
  node5 [label="Assign stringVar" shape="ellipse"];
  node6 [label="\"A string\"" shape="rect"];
  node5 -> node6 [label="value"];
  node0 -> node5 [label="elem[2]"];
  node7 [label="Assign x" shape="ellipse"];
  node8 [label="BinOp: POW" shape="hexagon"];
  node9 [label="BinOp: DIV" shape="hexagon"];
  node10 [label="BinOp: MUL" shape="hexagon"];
  node11 [label="BinOp: PLUS" shape="hexagon"];
  node12 [label="1" shape="rect"];
  node11 -> node12 [label="left"];
  node13 [label="1" shape="rect"];
  node11 -> node13 [label="right"];
  node10 -> node11 [label="left"];
  node14 [label="BinOp: MINUS" shape="hexagon"];
  node15 [label="1" shape="rect"];
  node14 -> node15 [label="left"];
  node16 [label="1" shape="rect"];
  node14 -> node16 [label="right"];
  node10 -> node14 [label="right"];
  node9 -> node10 [label="left"];
  node17 [label="5" shape="rect"];
  node9 -> node17 [label="right"];
  node8 -> node9 [label="left"];
  node18 [label="7" shape="rect"];
  node8 -> node18 [label="right"];
  node7 -> node8 [label="value"];
  node0 -> node7 [label="elem[3]"];
  node19 [label="Assign x" shape="ellipse"];
  node20 [label="Assign x" shape="ellipse"];
  node21 [label="BinOp: PLUS" shape="hexagon"];
  node22 [label="Accsess x" shape="ellipse"];
  node21 -> node22 [label="left"];
  node23 [label="5" shape="rect"];
  node21 -> node23 [label="right"];
  node20 -> node21 [label="value"];
  node19 -> node20 [label="value"];
  node0 -> node19 [label="elem[4]"];
  node24 [label="Assign x" shape="ellipse"];
  node25 [label="Assign x" shape="ellipse"];
  node26 [label="BinOp: MINUS" shape="hexagon"];
  node27 [label="Accsess x" shape="ellipse"];
  node26 -> node27 [label="left"];
  node28 [label="5" shape="rect"];
  node26 -> node28 [label="right"];
  node25 -> node26 [label="value"];
  node24 -> node25 [label="value"];
  node0 -> node24 [label="elem[5]"];
  node29 [label="Assign x" shape="ellipse"];
  node30 [label="Assign x" shape="ellipse"];
  node31 [label="BinOp: MUL" shape="hexagon"];
  node32 [label="Accsess x" shape="ellipse"];
  node31 -> node32 [label="left"];
  node33 [label="6" shape="rect"];
  node31 -> node33 [label="right"];
  node30 -> node31 [label="value"];
  node29 -> node30 [label="value"];
  node0 -> node29 [label="elem[6]"];
  node34 [label="Assign x" shape="ellipse"];
  node35 [label="Assign x" shape="ellipse"];
  node36 [label="BinOp: DIV" shape="hexagon"];
  node37 [label="Accsess x" shape="ellipse"];
  node36 -> node37 [label="left"];
  node38 [label="6" shape="rect"];
  node36 -> node38 [label="right"];
  node35 -> node36 [label="value"];
  node34 -> node35 [label="value"];
  node0 -> node34 [label="elem[7]"];
  node39 [label="CALL" shape="ellipse"];
  node40 [label="Accsess PRINT" shape="ellipse"];
  node39 -> node40 [label="callee"];
  node41 [label="BinOp: PLUS" shape="hexagon"];
  node42 [label="\"Asigning works, starting test comparisons (x) = \"" shape="rect"];
  node41 -> node42 [label="left"];
  node43 [label="DotCall: ToString" shape="ellipse"];
  node44 [label="Accsess x" shape="ellipse"];
  node43 -> node44 [label="parent"];
  node41 -> node43 [label="right"];
  node39 -> node41 [label="arg[0]"];
  node0 -> node39 [label="elem[8]"];
  node45 [label="IF" shape="diamond"];
  node46 [label="BinOp: EE" shape="hexagon"];
  node47 [label="Accsess x" shape="ellipse"];
  node46 -> node47 [label="left"];
  node48 [label="Accsess x" shape="ellipse"];
  node46 -> node48 [label="right"];
  node45 -> node46 [label="case[0]-cond"];
  node49 [label="LIST" shape="Msquare"];
  node50 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node49 -> node50 [label="elem[0]"];
  node45 -> node49 [label="case[0]-expr"];
  node0 -> node45 [label="elem[9]"];
  node51 [label="IF" shape="diamond"];
  node52 [label="BinOp: NE" shape="hexagon"];
  node53 [label="Accsess x" shape="ellipse"];
  node52 -> node53 [label="left"];
  node54 [label="69" shape="rect"];
  node52 -> node54 [label="right"];
  node51 -> node52 [label="case[0]-cond"];
  node55 [label="LIST" shape="Msquare"];
  node56 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node55 -> node56 [label="elem[0]"];
  node51 -> node55 [label="case[0]-expr"];
  node0 -> node51 [label="elem[10]"];
  node57 [label="IF" shape="diamond"];
  node58 [label="BinOp: LTE" shape="hexagon"];
  node59 [label="Accsess x" shape="ellipse"];
  node58 -> node59 [label="left"];
  node60 [label="Accsess x" shape="ellipse"];
  node58 -> node60 [label="right"];
  node57 -> node58 [label="case[0]-cond"];
  node61 [label="LIST" shape="Msquare"];
  node62 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node61 -> node62 [label="elem[0]"];
  node57 -> node61 [label="case[0]-expr"];
  node0 -> node57 [label="elem[11]"];
  node63 [label="IF" shape="diamond"];
  node64 [label="BinOp: GTE" shape="hexagon"];
  node65 [label="Accsess x" shape="ellipse"];
  node64 -> node65 [label="left"];
  node66 [label="69" shape="rect"];
  node64 -> node66 [label="right"];
  node63 -> node64 [label="case[0]-cond"];
  node67 [label="LIST" shape="Msquare"];
  node68 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node67 -> node68 [label="elem[0]"];
  node63 -> node67 [label="case[0]-expr"];
  node0 -> node63 [label="elem[12]"];
  node69 [label="IF" shape="diamond"];
  node70 [label="BinOp: LT" shape="hexagon"];
  node71 [label="Accsess x" shape="ellipse"];
  node70 -> node71 [label="left"];
  node72 [label="Accsess x" shape="ellipse"];
  node70 -> node72 [label="right"];
  node69 -> node70 [label="case[0]-cond"];
  node73 [label="LIST" shape="Msquare"];
  node74 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node73 -> node74 [label="elem[0]"];
  node69 -> node73 [label="case[0]-expr"];
  node0 -> node69 [label="elem[13]"];
  node75 [label="IF" shape="diamond"];
  node76 [label="BinOp: GT" shape="hexagon"];
  node77 [label="Accsess x" shape="ellipse"];
  node76 -> node77 [label="left"];
  node78 [label="69" shape="rect"];
  node76 -> node78 [label="right"];
  node75 -> node76 [label="case[0]-cond"];
  node79 [label="LIST" shape="Msquare"];
  node80 [label="SufAssign: x (Add? True)" shape="ellipse"];
  node79 -> node80 [label="elem[0]"];
  node75 -> node79 [label="case[0]-expr"];
  node0 -> node75 [label="elem[14]"];
  node81 [label="CALL" shape="ellipse"];
  node82 [label="Accsess PRINT" shape="ellipse"];
  node81 -> node82 [label="callee"];
  node83 [label="BinOp: PLUS" shape="hexagon"];
  node84 [label="\"End test comparisons (x) = \"" shape="rect"];
  node83 -> node84 [label="left"];
  node85 [label="DotCall: ToString" shape="ellipse"];
  node86 [label="Accsess x" shape="ellipse"];
  node85 -> node86 [label="parent"];
  node83 -> node85 [label="right"];
  node81 -> node83 [label="arg[0]"];
  node0 -> node81 [label="elem[15]"];
  node87 [label="Assign listVar" shape="ellipse"];
  node88 [label="LIST" shape="Msquare"];
  node89 [label="1" shape="rect"];
  node88 -> node89 [label="elem[0]"];
  node90 [label="2" shape="rect"];
  node88 -> node90 [label="elem[1]"];
  node91 [label="3" shape="rect"];
  node88 -> node91 [label="elem[2]"];
  node87 -> node88 [label="value"];
  node0 -> node87 [label="elem[16]"];
  node92 [label="DEF: add()" shape="ellipse"];
  node93 [label="BinOp: PLUS" shape="hexagon"];
  node94 [label="Accsess a" shape="ellipse"];
  node93 -> node94 [label="left"];
  node95 [label="Accsess b" shape="ellipse"];
  node93 -> node95 [label="right"];
  node92 -> node93 [label="body"];
  node0 -> node92 [label="elem[17]"];
  node96 [label="CALL" shape="ellipse"];
  node97 [label="Accsess PRINT" shape="ellipse"];
  node96 -> node97 [label="callee"];
  node98 [label="CALL" shape="ellipse"];
  node99 [label="Accsess add" shape="ellipse"];
  node98 -> node99 [label="callee"];
  node100 [label="23" shape="rect"];
  node98 -> node100 [label="arg[0]"];
  node101 [label="7" shape="rect"];
  node98 -> node101 [label="arg[1]"];
  node96 -> node98 [label="arg[0]"];
  node0 -> node96 [label="elem[18]"];
  node102 [label="DEF: addTimes()" shape="ellipse"];
  node103 [label="LIST" shape="Msquare"];
  node104 [label="Assign end" shape="ellipse"];
  node105 [label="Accsess a" shape="ellipse"];
  node104 -> node105 [label="value"];
  node103 -> node104 [label="elem[0]"];
  node106 [label="For: IDENTIFIER:i" shape="ellipse"];
  node107 [label="0" shape="rect"];
  node106 -> node107 [label="start"];
  node108 [label="Accsess x" shape="ellipse"];
  node106 -> node108 [label="end"];
  node109 [label="0.5" shape="rect"];
  node106 -> node109 [label="step"];
  node110 [label="LIST" shape="Msquare"];
  node111 [label="IF" shape="diamond"];
  node112 [label="BinOp: EE" shape="hexagon"];
  node113 [label="Accsess i" shape="ellipse"];
  node112 -> node113 [label="left"];
  node114 [label="2" shape="rect"];
  node112 -> node114 [label="right"];
  node111 -> node112 [label="case[0]-cond"];
  node115 [label="LIST" shape="Msquare"];
  node116 [label="ContinueNode" shape="ellipse"];
  node115 -> node116 [label="elem[0]"];
  node111 -> node115 [label="case[0]-expr"];
  node117 [label="BinOp: EE" shape="hexagon"];
  node118 [label="Accsess i" shape="ellipse"];
  node117 -> node118 [label="left"];
  node119 [label="10" shape="rect"];
  node117 -> node119 [label="right"];
  node111 -> node117 [label="case[1]-cond"];
  node120 [label="LIST" shape="Msquare"];
  node121 [label="BreakNode" shape="ellipse"];
  node120 -> node121 [label="elem[0]"];
  node111 -> node120 [label="case[1]-expr"];
  node110 -> node111 [label="elem[0]"];
  node122 [label="Assign end" shape="ellipse"];
  node123 [label="Assign end" shape="ellipse"];
  node124 [label="BinOp: PLUS" shape="hexagon"];
  node125 [label="Accsess end" shape="ellipse"];
  node124 -> node125 [label="left"];
  node126 [label="Accsess b" shape="ellipse"];
  node124 -> node126 [label="right"];
  node123 -> node124 [label="value"];
  node122 -> node123 [label="value"];
  node110 -> node122 [label="elem[1]"];
  node106 -> node110 [label="body"];
  node103 -> node106 [label="elem[1]"];
  node127 [label="ReturnNode" shape="ellipse"];
  node128 [label="Accsess end" shape="ellipse"];
  node127 -> node128 [label="return"];
  node103 -> node127 [label="elem[2]"];
  node102 -> node103 [label="body"];
  node0 -> node102 [label="elem[19]"];
  node129 [label="CALL" shape="ellipse"];
  node130 [label="Accsess PRINT" shape="ellipse"];
  node129 -> node130 [label="callee"];
  node131 [label="CALL" shape="ellipse"];
  node132 [label="Accsess addTimes" shape="ellipse"];
  node131 -> node132 [label="callee"];
  node133 [label="2" shape="rect"];
  node131 -> node133 [label="arg[0]"];
  node134 [label="3" shape="rect"];
  node131 -> node134 [label="arg[1]"];
  node135 [label="4" shape="rect"];
  node131 -> node135 [label="arg[2]"];
  node129 -> node131 [label="arg[0]"];
  node0 -> node129 [label="elem[20]"];
  node136 [label="IF" shape="diamond"];
  node137 [label="BinOp: EE" shape="hexagon"];
  node138 [label="Accsess x" shape="ellipse"];
  node137 -> node138 [label="left"];
  node139 [label="0" shape="rect"];
  node137 -> node139 [label="right"];
  node136 -> node137 [label="case[0]-cond"];
  node140 [label="LIST" shape="Msquare"];
  node141 [label="Assign x" shape="ellipse"];
  node142 [label="1" shape="rect"];
  node141 -> node142 [label="value"];
  node140 -> node141 [label="elem[0]"];
  node136 -> node140 [label="case[0]-expr"];
  node0 -> node136 [label="elem[21]"];
}
